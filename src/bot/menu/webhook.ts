import { backButtons, BotContext } from "@bot/extensions";
import { createBackMainMenuButtons, MenuTemplate } from "telegraf-inline-menu/dist/source";

let controller: IWebhookController;

const webhookMenu = new MenuTemplate<BotContext>(
    async context => {
        if (!controller) {
            controller = webhookController(context);
        }

        const url = await controller.getServerUrl();
        const started = controller.isStarted();
        const statusText = started ? "\n\nüéà –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω" : "";

        const text =
            "<b>Webhook üìª</b>\n\n" +
            "Webhook - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–ø–æ–≤–µ—â–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n" +
            "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã —Ç—Ä–µ–±—É—é—Ç SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ –Ω–∏–∂–µ.\n" +
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.\n\n" +
            "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: cutt.ly\/bEamKAe\n" +
            `üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Webhook: ${url} ${statusText}`;

        return {
            text,
            parse_mode: "HTML",
            disable_web_page_preview: true
        }
    }
);

webhookMenu.interact("üßô‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", "start", {
    async do(context) {
        controller.start();
        return true;
    },
    async hide(context) {
        return controller.isStarted();
    }
})

webhookMenu.interact(
    async context => {
        const has = controller.hasSSL();
        return has ? "üñä –ò–∑–º–µ–Ω–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" : "üßæ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç";
    },
    "ssl-install",
    {
        async do(context) {
            await context.scene.enter("certificate-upload-scene");
            return true;
        },
    }
);

webhookMenu.manualRow(backButtons);

interface IWebhookController {
    isStarted();
    start();
    hasSSL();
    getServerUrl(): Promise<string | undefined>;
}

function webhookController(context: BotContext): IWebhookController {
    return {
        isStarted() {
            return context.parent.request("server-started");
        },

        start() {
            return context.parent.request("server-run");
        },

        hasSSL() {
            return context.parent.request("server-has-certificate")
        },

        getServerUrl() {
            return context.parent.request("server-get-url");
        }
    }
}

export default webhookMenu;