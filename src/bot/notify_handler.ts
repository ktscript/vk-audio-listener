import { ILADataFlag } from "@main/exceptions/data_exception";
import { ILANotification, ILANotificationCode } from "@main/types";
import { Markup } from "telegraf";
import { Message, User } from "telegraf/typings/core/types/typegram";
import { ExtraReplyMessage } from "telegraf/typings/telegram-types";
import Bot from ".";
import { BACK_KEYBOARD } from "./constants";
import { numberDeclination } from "./extensions";

export class BotNotificationHandler {
    private notifications: Map<ILANotificationCode, Message.TextMessage>;

    public constructor(private bot: Bot) {
        this.notifications = new Map();
    }

    public async notify(user: User, notification: ILANotification) {
        const send = this.createReplyHTMLMessage(user);
        const sendTemporary = (delay): typeof send => async (text, extra) => {
            const message = await send(text, extra);
            setTimeout(() => this.deleteMessage(message), delay);
            return message;
        }

        const { code, payload } = notification;
        switch (code) {
            case ILANotificationCode.NEED_AUTHORIZATION: {
                const declination = numberDeclination(payload.length, [
                    "–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
                    "–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞",
                    "–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                ])

                const message = await send(
                    `‚ö† <b>–£ –≤–∞—Å ${payload.length} ${declination}.</b>\n\n` +
                    `–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤: /accounts`
                );

                setTimeout(() => this.deleteMessage(message), 5_000);

                break;
            }

            case ILANotificationCode.ACCOUNTS_VALIDATION_START: {
                const declination = numberDeclination(payload, ["–∞–∫–∫–∞—É–Ω—Ç–∞", "–∞–∫–∫–∞—É–Ω—Ç–æ–≤", "–∞–∫–∫–∞—É–Ω—Ç–æ–≤"]);
                const message = await send(
                    `‚åõ <b>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ ${payload} ${declination}...</b>`
                );

                this.notifications.set(
                    ILANotificationCode.ACCOUNTS_VALIDATION_START,
                    message
                );

                break;
            }

            case ILANotificationCode.ACCOUNTS_VALIDATION_STOP: {
                await this.deletePreviousNotify(ILANotificationCode.ACCOUNTS_VALIDATION_START);
                const { total, success, authorized } = payload;
                const text = [
                    "–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: " + total,
                    "–ì–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞–±–æ—Ç–µ: " + success,
                    "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: " + (total - authorized)
                ].join('\n');

                const message = await send("<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üòé</b>\n\n" + text);
                setTimeout(() => this.deleteMessage(message), 5_000);

                break;
            }

            case ILANotificationCode.PROXY_VALIDATION_START: {
                const message = await send("‚åõ <b>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤...</b>");
                this.notifications.set(ILANotificationCode.PROXY_VALIDATION_START, message);

                break;
            }

            case ILANotificationCode.PROXY_VALIDATION_STOP: {
                await this.deletePreviousNotify(ILANotificationCode.PROXY_VALIDATION_START);

                const message = await send(`<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üòé</b>`)
                setTimeout(() => this.deleteMessage(message), 3_000);

                break;
            }

            case ILANotificationCode.ACCOUNTS_PROXY_VALIDATION_START: {
                const message = await send("‚åõ <b>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤ —É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...</b>")
                this.notifications.set(
                    ILANotificationCode.ACCOUNTS_PROXY_VALIDATION_START,
                    message
                );

                break;
            }

            case ILANotificationCode.ACCOUNTS_PROXY_VALIDATION_STOP: {
                await this.deletePreviousNotify(ILANotificationCode.ACCOUNTS_PROXY_VALIDATION_START);
                const message = await send(`<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤ —É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üòé</b>`)
                setTimeout(() => this.deleteMessage(message), 5_000);

                break;
            }

            case ILANotificationCode.CONNECTION_CHECK_START: {
                const message = await send(`<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...</b>`);
                this.notifications.set(
                    ILANotificationCode.CONNECTION_CHECK_START,
                    message
                );
                break;
            }

            case ILANotificationCode.CONNECTION_CHECK_END: {
                await this.deletePreviousNotify(ILANotificationCode.CONNECTION_CHECK_START);
                break;
            }

            case ILANotificationCode.SCRIPT_EXECUTE_ERROR: {
                if (!notification.payload) return;
                const { script, message } = notification.payload!;
                await sendTemporary(60_000)(`‚ö† –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞ (<b>${script.name.trim()}</b>) –ø—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b>\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: <i>${message}</i>`, { parse_mode: "HTML" })
                break;
            }

            case ILANotificationCode.DATA_REQUIRED: {
                this.require(payload, { send, sendTemporary });
                break;
            }


            case ILANotificationCode.AUTHORIZATION_START: {
                const info = [
                    "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞</b> ‚è≥\n",
                    `–ê–∫–∫–∞—É–Ω—Ç–æ–≤: ${payload.count || "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}`
                ].join("\n");
                await sendTemporary(10_000)(info, { parse_mode: "HTML" });
                break;
            }

            case ILANotificationCode.AUTHORIZATION_COMPLETE: {
                const info = [
                    "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b> üî•\n",
                    `–ê–∫–∫–∞—É–Ω—Ç–æ–≤: ${payload.count || "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}`,
                    `–£–¥–∞–ª–µ–Ω–æ: ${payload.deletedCount}`
                ].join("\n");
                await sendTemporary(10_000)(info, { parse_mode: "HTML" });
                break;
            }

            case ILANotificationCode.AUTHORIZATION_NOT_REQUIRED: {
                await sendTemporary(10_000)("‚ö† <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>", { parse_mode: "HTML" });
                break;
            }

            case ILANotificationCode.LISTENER_START: {
                const info = [
                    "<b>–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å</b> üòô\n",
                    `–ö–æ–ª-–≤–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${payload.count || 0}`
                ].join("\n");
                await sendTemporary(10_000)(info, { parse_mode: "HTML" });
                break;
            }

            case ILANotificationCode.LISTENER_STOP: {
                await sendTemporary(5_000)("<b>–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b> üß®", { parse_mode: "HTML" });
                break;
            }

            case ILANotificationCode.LISTENER_TASK_COMPLETED: {
                const info = [
                    "<b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b> üî•\n",
                    `–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ${payload.playlist.title}`,
                    `–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: ${payload.progress.actual}`
                ].join("\n");

                await sendTemporary(60_000)(info, { parse_mode: "HTML" });
                break;
            }
        }
    }

    private async require(flag: number, { send, sendTemporary }) {
        const ERROR_EMOJI = "‚≠ïÔ∏è";
        const createKeyboard = (buttonText, buttonAction) => Markup.inlineKeyboard([
            [Markup.button.callback(buttonText, buttonAction)]
        ]);

        if (flag & ILADataFlag.ACCOUNTS) {
            await send(
                "‚ö† –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã.",
                createKeyboard("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", "add-accounts")
            );
        }

        if (flag & ILADataFlag.PROXIES) {
            await send(
                "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤.",
                createKeyboard("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", "add-proxy")
            );
        }

        if (flag & ILADataFlag.ANTICAPTCHA) {
            await send(
                "‚ö† –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–ª—é—á –æ—Ç –∞–Ω—Ç–∏-–∫–∞–ø—á–∏.\n\n–ë–µ–∑ –∞–Ω—Ç–∏-–∫–∞–ø—á–∏, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã.",
                createKeyboard("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á", "edit-anticaptcha-key")
            );
        }

        if (flag & ILADataFlag.TASKS) {
            await send(
                `${ERROR_EMOJI} <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ`, {
                parse_mode: "HTML",
                reply_markup: createKeyboard("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "add-task").reply_markup
            });
        }

        if (flag & ILADataFlag.SYSTEM_PROXY) {
            const info = await this.bot.adapter.request("get-ip-info");
            const hasInfo = info?.status == "success";
            const texts =
                `<b>–†–µ–≥–∏–æ–Ω</b>: <i>${info?.regionName}</i>\n` +
                `<b>–°—Ç—Ä–∞–Ω–∞</b>: <i>${info?.country}</i>\n` +
                `<b>IP-–∞–¥—Ä–µ—Å</b>: <i>${info?.query}</i>\n` +
                `<b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä</b>: <i>${info?.isp}</i>`;

            const extraInfo = hasInfo ? `${texts}\n\n` : "";
            await send(
                ERROR_EMOJI + " <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º vk.com, mail.ru.</b>\n\n" +
                extraInfo +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: /settings",
                {
                    parse_mode: "HTML",
                    reply_markup: BACK_KEYBOARD.reply_markup
                }
            );
        }
    }

    private async deleteMessage(message: Message.TextMessage) {
        return this.bot.telegraf.telegram.deleteMessage(
            message.chat.id,
            message.message_id
        ).catch((error) => { console.log("error:", error) });
    }

    private async deletePreviousNotify(code: ILANotificationCode) {
        try {
            const previous = this.notifications.get(code);
            if (!previous) return;
            this.notifications.delete(code);
            await this.deleteMessage(previous);
        } catch (error) { }
    }

    private createReplyHTMLMessage(user: User) {
        const { telegram } = this.bot.telegraf;
        return (text: string, extra?: ExtraReplyMessage) => telegram.sendMessage(user.id, text, { ...extra, parse_mode: "HTML" });
    }
}