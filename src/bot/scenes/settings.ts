import menu from "@bot/menu";
import { Markup, Scenes } from "telegraf";
import { BACK_BUTTON, BACK_KEYBOARD, PROXY_FORMATS } from "@bot/constants";
import { asyncWrapper, BotContext, getTextMessage } from "@bot/extensions";
export const editAntiCaptcha = new Scenes.WizardScene<BotContext>(
    "edit-anticaptcha",

    asyncWrapper(async (context: BotContext) => {
        const key = context.parent.request("anticaptcha-get");
        const text = key ? `\n\n–¢–µ–∫—É—â–∏–π –∫–ª—é—á: ${key}` : "";
        await context.reply(
            "üìü –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –æ—Ç –∞–Ω—Ç–∏-–∫–∞–ø—á–∏ (anti-captcha.com)" + text,
            BACK_KEYBOARD
        );
        return context.wizard.next();
    }),

    asyncWrapper(async context => {
        const text = await getTextMessage(context);
        if (!text) return await context.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∞–Ω—Ç–∏-–∫–∞–ø—á–∏.", BACK_KEYBOARD);
        const response = await context.parent.request("anticaptcha-set", text.trim());
        if (!response) {
            return await context.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", BACK_KEYBOARD);
        }

        await context.reply("–ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        await cancel(context);
    })
);

editAntiCaptcha.action("back", async context => {
    await context.answerCbQuery("Cancelation...");
    await cancel(context);
})

const SELECT_PROXYTYPE_KEYBOARD = Markup.inlineKeyboard([
    [
        Markup.button.callback("SOCKS", "select-socks"),
        Markup.button.callback("HTTP(-S)", "select-http")
    ],
    [BACK_BUTTON]
]);

export const editSystemProxy = new Scenes.WizardScene<BotContext>(
    "edit-system-proxy",
    asyncWrapper(async context => {
        const systemProxy = context.parent.request("proxy-system-get");
        const currentDecorate = systemProxy
            ? `üßÇ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å: <i>${systemProxy.address}:${systemProxy.port}</i>`
            : `‚ö† –ü—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`;


        const formatText = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–∞.";
        await context.replyWithHTML(`<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–∞</b>\n\n${currentDecorate}\n${formatText}`, SELECT_PROXYTYPE_KEYBOARD);
    }),

    asyncWrapper(async context => {
        const text = getTextMessage(context);
        if (!text) {
            return await context.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å.", BACK_KEYBOARD);
        }
        const { type } = context.wizard.state;
        await context.reply("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å.\n\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...");
        const result = await context.parent.request("proxy-system-set", type, text);

        if (!result)
            return await context.reply(
                "‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å.\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π.",
                BACK_KEYBOARD
            );

        await context.reply(
            "üòá –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n" +
            `‚åõ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç mail.ru –∏ vk.com: ${Number(result.time).toLocaleString("ru")} ms`
        );
        await cancel(context);
    })
);

editSystemProxy.action(/select-(\S+)/i, async context => {
    await context.answerCbQuery();
    const type = context.match[1];
    context.wizard.state.type = type;

    await context.reply(
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ${type.toUpperCase()} –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å.\n\n` +
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–æ–∫—Å–∏-–∞–¥—Ä–µ—Å–æ–≤:\n" +
        PROXY_FORMATS.map((format, index) => `${index + 1}) ${format}`).join("\n"),
        BACK_KEYBOARD
    );

    context.wizard.next();
})

editSystemProxy.action("back", async context => {
    await context.answerCbQuery();
    await cancel(context);
});

async function cancel(context: BotContext) {
    await context.scene.leave();
    await menu.replyToContext(context, "/settings_menu/");
}