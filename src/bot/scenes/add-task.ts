import { Markup, Scenes } from "telegraf";
import { parsePlaylistUrl } from "@main/utils/helpers";
import { BACK_KEYBOARD, ERROR_EMOJI } from "../constants";
import { asyncWrapper, BotContext, getStateReference, getTextMessage, playlistDecorator } from "../extensions";
import menu from "../menu";
import { Logger } from "@utils/logger";

const COMPLETE_BUTTON = Markup.button.callback("Ôºã –°–æ–∑–¥–∞—Ç—å", "create-task");

const DEFAULT_TASK_SETTINGS = {
    enableHuman: true,
    enableFavoriteAudio: false,
    startTime: null,
    endTime: null
}

const settingsKeyboard = {
    human: ["–û—Ç–∫–ª—é—á–∏—Ç—å –∂–∏–≤—ã–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è", "–í–∫–ª—é—á–∏—Ç—å –∂–∏–≤—ã–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"],
    favorite: ["–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–∏ –∞—É–¥–∏–æ", "–í–∫–ª—é—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–∏ –∞—É–¥–∏–æ"]
}

const addNewTaskScene = new Scenes.WizardScene<BotContext>("add-new-task",
    asyncWrapper(async (context) => {
        let state = getStateReference(context);
        state.task = {};

        await context.reply("üîó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç.", BACK_KEYBOARD);
        return context.wizard.next();
    }),

    asyncWrapper(async (context) => {
        let state = getStateReference(context);
        if (context.message && "text" in context.message) {
            let string = context.message.text.trim();
            let result = parsePlaylistUrl(string);
            if (result) {
                await context.reply("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ...");
                try {
                    const playlistContent = await context.parent.request("listener-playlist-info", string);
                    state.task.playlist = playlistContent;
                    await context.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞.\n\n" + playlistDecorator(playlistContent), { parse_mode: "Markdown" });
                } catch (error) {
                    Logger.error("Fetching playlist error:", error);
                    return await context.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
                }

                state.task.playlistUrl = string;

                await context.reply(
                    "üôÇ *–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π.*\n\n" +
                    `üéó –£–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –±—É–¥–µ—Ç –ø—Ä–∏–±–∞–≤–ª–µ–Ω–æ –∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç–µ (${state.task.playlist.listens}).\n` +
                    "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç *—É–¥–∞–ª–µ–Ω–æ*", {
                    reply_markup: BACK_KEYBOARD.reply_markup,
                    parse_mode: "Markdown"
                });

                return context.wizard.next();
            }
        }

        await context.reply(`${ERROR_EMOJI} –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑.`, BACK_KEYBOARD);
    }),

    asyncWrapper(async (context) => {
        const state = getStateReference(context);
        const text = getTextMessage(context);
        const number = Number(text);

        if (!text || number == NaN || number < 1 || number > 2e9) {
            return await context.replyWithHTML(`${ERROR_EMOJI} <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`, BACK_KEYBOARD);
        }

        state.task.totalCount = number;
        state.task.settings = DEFAULT_TASK_SETTINGS;
        await printKeyboard(context);
        context.wizard.next();
    }),

    asyncWrapper(async context => { })
);

addNewTaskScene.action("back", asyncWrapper(
    async context => {
        await context.answerCbQuery();
        await finish(context);
    }
));

addNewTaskScene.action("toggle-human", asyncWrapper(
    async context => {
        await context.answerCbQuery();
        const { state } = context.wizard;
        const { settings } = state.task;
        settings.enableHuman = !settings.enableHuman;
        await editKeyboard(context);
    }
));

addNewTaskScene.action("toggle-favorite", asyncWrapper(
    async context => {
        await context.answerCbQuery();
        const { state } = context.wizard;
        const { settings } = state.task;
        settings.enableFavoriteAudio = !settings.enableFavoriteAudio;
        await editKeyboard(context);
    }
));

addNewTaskScene.action(
    "create-task", asyncWrapper(
        async context => {
            await context.answerCbQuery();
            await add(context);
            await finish(context);
        }
    )
)

async function printKeyboard(context: BotContext) {
    const message = createTaskSettingsMessage(context);
    await context.replyWithHTML(message.text, message.keyboard);
}

async function editKeyboard(context: BotContext) {
    const message = createTaskSettingsMessage(context);
    await context.editMessageReplyMarkup(message.keyboard.reply_markup);
}

function createTaskSettingsMessage(context: BotContext) {
    const text =
        '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏—è</b>\n\n' +
        '–ñ–∏–≤—ã–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç–µ –∏—Ö, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —É –≤–∞—à–µ–≥–æ –∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞.\n' +
        '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–∏ –∞—É–¥–∏–æ - –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ç—Ä–µ–∫-–ª–∏—Å—Ç–æ–≤.';

    const { button } = Markup;
    const { task } = context.wizard.state;

    const humanButton = button.callback(
        settingsKeyboard.human[+task.settings.enableHuman],
        "toggle-human"
    );
    const favoriteButton = button.callback(
        settingsKeyboard.favorite[+task.settings.enableFavoriteAudio],
        "toggle-favorite"
    );

    const keyboard = Markup.inlineKeyboard([
        [humanButton],
        [favoriteButton],
        [COMPLETE_BUTTON]
    ]);

    return { text, keyboard };
}

async function add(context: BotContext) {
    const state = context.wizard.state;
    await context.parent.request("listener-add-task", state.task);
    await context.replyWithMarkdown(`ü¶Å *–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ*`);

}
async function finish(context: BotContext) {
    await menu.replyToContext(context, "/listener_menu/");
    return context.scene.leave();
}


export default addNewTaskScene;