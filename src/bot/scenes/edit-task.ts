import { BACK_BUTTON, BACK_KEYBOARD } from "@bot/constants";
import { asyncWrapper, BotContext, getStateReference } from "@bot/extensions";
import { Logger } from "@utils/logger";
import { Markup, Scenes } from "telegraf";

const CHANGE_TASK_KEYBOARD = Markup.inlineKeyboard([
    [Markup.button.callback("–°–∫–æ—Ä–æ—Å—Ç—å", "task-speed")],
    [BACK_BUTTON]
]);

const scene = new Scenes.WizardScene(
    "edit-task",
    asyncWrapper(async context => {
        const { task } = getStateReference(context);
        const title = task.playlistContent?.title ?? " ";

        await context.reply(`‚úè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ${title}ü§®\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?`, CHANGE_TASK_KEYBOARD);
    }),

    asyncWrapper(async context => {
        if (!context.message || !("text" in context.message)) {
            return sendIncorrectError(context);
        }

        const number = Number(context.message.text.trim());
        // const { sessions } = bus.getCache();
        // const { task } = getStateReference(context) as { task: Task };

        // if (!number) {
        //     return sendIncorrectError(context);
        // } else if (number < 0 || number > sessions.length) {
        //     return sendIncorrectNumber(context);
        // }

        try {
            // await bus.listens.editTask(task.id, { });
            await context.reply("üòÅ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ —Å–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ");
        } catch (error) {
            await context.reply("ü§¨ –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–æ–Ω—Å–æ–ª–∏.");
            Logger.error(error);
        }

        await leaveScene(context);
    })
);

scene.action(
    "task-speed", asyncWrapper(async context => {
        await context.answerCbQuery();
        // const { task } = getStateReference(context) as { task: Task };
        // const { sessions } = bus.getCache();

        // await context.reply(
        //     "üëΩ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.\n\n" +
        //     "–í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª—É–∂–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ –Ω–∞–∫—Ä—É—Ç–∫–µ, " +
        //     "–∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—É, –∫–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π, " +
        //     "–±—É–¥–µ—Ç –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n\n" +
        //     `‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ —Å–µ—Å—Å–∏–π: ${sessions.length}\n` +
        //     `‚ùï –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ 0\n`,
        //     // "‚ùï –¢–µ–∫—É—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: " + (task.maxSessionsCount || "–Ω–µ –∑–∞–¥–∞–Ω–æ"),
        //     BACK_KEYBOARD
        // );

        return context.wizard.next();
    })
);

scene.action(
    "back", asyncWrapper(async context => {
        await context.answerCbQuery();
        await leaveScene(context);
    })
);

function sendIncorrectNumber(context: BotContext) {
    // const { sessions } = bus.getCache();

    // return context.reply(
    //     "ü§¨ –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!\n\n" +
    //     `‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–µ—Å—Å–∏–π: ${sessions.length}.\n` +
    //     `‚ùï –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.`);
}

function sendIncorrectError(context: BotContext) {
    return context.reply("üòí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–µ—Å—Å–∏–π:", BACK_KEYBOARD);
}

async function leaveScene(context: BotContext) {
    // await menu.replyToContext(context, "/listens_menu/");
    await context.scene.leave();
}


export default scene;